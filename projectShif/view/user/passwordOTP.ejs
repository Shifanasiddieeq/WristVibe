<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link rel="stylesheet" href="/style/user/otp.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
        }

        .otp-container {
            text-align: center;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 100%;
        }

        .otp-container h1 {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .otp-container p {
            font-size: 1rem;
            color: #666;
            margin-bottom: 20px;
        }

        .otp-form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .otp-inputs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .otp-inputs input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 1.5rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .otp-inputs input:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

        .verify-btn {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
        }

        .verify-btn:hover {
            background-color: #0056b3;
        }

        #resend-otp {
            display: none;
            margin-top: 10px;
            background-color: #6c757d;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
        }

        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .success-message {
            color: green;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
    </style>
</head>

<body>
    <div class="otp-container">
        <h1>OTP Verification</h1>
        <p>Enter the 4-digit code sent to your email</p>
        <p id="timer"></p>
        <form class="otp-form" onsubmit="submitOtp(event)">
            <div class="error-message" id="error-message"></div>
            <div class="success-message" id="success-message"></div>
            <div class="otp-inputs">
                <input type="text" id="otp1" maxlength="1" autofocus>
                <input type="text" id="otp2" maxlength="1">
                <input type="text" id="otp3" maxlength="1">
                <input type="text" id="otp4" maxlength="1">
            </div>
            <button type="submit" class="verify-btn">Verify</button>
        </form>
        <button id="resend-otp" onclick="resendOtp()">Resend OTP</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const otpInputs = document.querySelectorAll('.otp-inputs input');
        const errorMessage = document.getElementById('error-message');
        const successMessage = document.getElementById('success-message');
        const resendButton = document.getElementById('resend-otp');
        const timerElement = document.getElementById('timer');
        let remainingTime = 5;
        let timer;


        function getOtp() {
            return Array.from(otpInputs).map(input => input.value).join('');
        }


        function startTimer() {
            timer = setInterval(() => {
                if (remainingTime > 0) {
                    timerElement.textContent = `Resend OTP in ${remainingTime}s`;
                    remainingTime -= 1;
                } else {
                    clearInterval(timer);
                    timerElement.textContent = '';
                    resendButton.style.display = 'block';
                }
            }, 1000);
        }


        async function submitOtp(event) {
            event.preventDefault();
            errorMessage.textContent = '';
            successMessage.textContent = '';
            const otp = getOtp();

            if (otp.length === 4) {
                try {
                    const response = await axios.post('/verifyPassword', { otp });
                    successMessage.textContent = response.data.message;
                    setTimeout(() => {
                        window.location.href = '/changePassword';
                    }, 1500);
                } catch (error) {
                    if (error.response && error.response.data.message) {
                        errorMessage.textContent = error.response.data.message;
                    } else {
                        console.error('Error verifying OTP:', error);
                    }
                }
            } else {
                errorMessage.textContent = 'Please enter all 4 digits.';
            }
        }


        async function resendOtp() {
            try {
                resendButton.style.display = 'none';
                remainingTime = 5;
                startTimer();

                const response = await axios.post('/resendPasswordOTP');
                successMessage.textContent = response.data;
            } catch (error) {
                errorMessage.textContent = 'Failed to resend OTP. Please try again.';
                console.error('Error resending OTP:', error);
            }
        }


        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                const current = e.target;
                const next = otpInputs[index + 1];
                const prev = otpInputs[index - 1];

                if (current.value && next) {
                    next.focus();
                } else if (e.inputType === 'deleteContentBackward' && prev) {
                    prev.focus();
                }
            });

            input.addEventListener('keypress', (e) => {
                if (!/^\d$/.test(e.key)) {
                    e.preventDefault();
                }
            });
        });


        window.onload = startTimer;
    </script>
</body>

</html>